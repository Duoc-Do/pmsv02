@model WebApp.Areas.Accounting.Models.AppVIN05View
@using WebApp.Areas.Accounting.Services
@{Dictionary<string, string> ajaxoption = (Dictionary<string, string>)ViewBag.ajaxoption;}

@Html.Partial("_AddNew")
<section id="@(ajaxoption["ajaxupdateid"])">
    <div class="box box-primary">
        @Html.Partial("_HeaderEdit")

        @using (@Ajax.BeginForm(new AjaxOptions { LoadingElementId = ajaxoption["ajaxloadingid"], InsertionMode = InsertionMode.Replace, UpdateTargetId = ajaxoption["ajaxupdateid"] }))
        {  
            <div class="box-body">
                @Html.AntiForgeryToken()
                @Html.bsValidationSummary(false)

                <h3>Thông tin chung</h3>
                @Html.svHiddenFor(model => model.DocumentID)
                @Html.svHiddenFor(model => model.ParentID)
                @Html.svHiddenFor(model => model.CurrencyID)
                @Html.svHiddenFor(model => model.CustomerID)
                @Html.svHiddenFor(model => model.PostType)
                @Html.svHiddenFor(model => model.VoucherID)
                @Html.svHiddenFor(model => model.VoucherCode)
                @Html.svHiddenFor(model => model.VoucherName)

                @Html.svHiddenFor(model => model.WarehouseID)
                                @Html.svHiddenFor(model => model.CreatedBy)
                @Html.svHiddenFor(model => model.CreatedDateTime)
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row-fluid">
                            <div class="row">
                                <div class="col-md-6">
                                    @Html.bsEditorFor(model => model.VoucherDate)
                                    @Html.bsEditorFor(model => model.VoucherNumber)
                                </div>
                                <div class="col-md-6">
                                    @Html.bsEditorFor(model => model.IsoCode)
                                    @Html.bsEditorFor(model => model.ExchangeRate)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">

                        <div class="row">
                            <div class="col-md-6">

                                @Html.bsEditorFor(model => model.CustomerCode)
                                @Html.bsTextAreaFor(model => model.CustomerName)
                            </div>
                            <div class="col-md-6">
                                @Html.bsTextAreaFor(model => model.Address)

                                @Html.bsEditorFor(model => model.Contact)
                            </div>
                        </div>

                        @Html.bsTextAreaFor(model => model.Description)
                        <div class="row">
                            <div class="col-md-6">
                                @Html.bsEditorFor(model => model.WarehouseCode)
                            </div>
                            <div class="col-md-6">
                                @Html.bsEditorFor(model => model.WarehouseName)
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                            </div>
                            <div class="col-md-6">
                                @Html.bsEditorFor(model => model.IsFixPrice)
                            </div>
                        </div>

                    </div>
                </div>

                @*Lưới chi tiết hạch toán*@
                <div class="row-fluid">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title">Hạch toán</h3>
                        </div>
                        <div id="divAppVIN05LineView" class="sv-grid-container">
                            @Html.svGridVoucher(Model.AppVIN05LineViews, "DocumentLineID", "0", new WebApp.Areas.Accounting.Models.AppVIN05LineView())
                        </div>
                    </div>

                </div>

                @*Tổng cộng*@
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-4">
                                @Html.bsEditorFor(model => model.SumQuantity0)
                            </div>
                            <div class="col-md-4" id="tb_FC">
                                @Html.bsEditorFor(model => model.SumAmountFC)
                            </div>
                            <div class="col-md-4">
                                @Html.bsEditorFor(model => model.SumAmount)
                            </div>
                        </div>
                    </div>
                </div>
                @Html.Partial("_ToolbarVoucherUpdate", ajaxoption)
            </div>

        }
        @Html.Partial("_FooterEdit")
    </div>
</section>

@Scripts.Render("~/bundles/accapp")

<script type="text/javascript">

    var globlevar_isocode = "@(Voucher.GetIsoCode())";

    $(document).ready(function () {
        hideshowgrid();
        form_refresh();
    });

    function hideshowgrid() {
        var sectionid = "#@(ajaxoption["ajaxupdateid"]) ";
        var IsoCode = $(sectionid + '#IsoCode').val();
        var isFC = (IsoCode.toUpperCase() != globlevar_isocode.toUpperCase());

        var fieldFC = "[fieldname=AmountFC],[fieldname=UnitPriceFC]";
        if (isFC == true) {

            $("#divAppVIN05LineView table:first tr").children(fieldFC).each(function () {
                $(this).show();
            });

            $("#divAppVIN05LineView table:first tbody tr td").children(fieldFC).each(function () {
                $(this).parent().show();
            });

            //master

            $(sectionid + "#tb_FC").show();
        }
        else {
            $("#divAppVIN05LineView table:first tr").children(fieldFC).each(function () {
                $(this).hide();
            });

            $("#divAppVIN05LineView table:first tbody tr td").children(fieldFC).each(function () {
                $(this).parent().hide();
            });

            //master
            $(sectionid + "#tb_FC").hide();
        }
    }

    function form_refresh() {

        var SumQuantity0 = 0;
        var SumAmount = 0;
        var SumAmountFC = 0;

        var sectionid = "#@(ajaxoption["ajaxupdateid"]) ";

        $("#divAppVIN05LineView table:first >tbody>tr:visible").each(function () {

            if ($(this).attr("rownumber") != "-1") {
                SumQuantity0 += parseFloat($(this).find('input[fieldname = "Quantity0"]:first').autoNumericGet());

                SumAmount += parseFloat($(this).find('input[fieldname = "Amount"]:first').autoNumericGet());
                SumAmountFC += parseFloat($(this).find('input[fieldname = "AmountFC"]:first').autoNumericGet());
            }

        });



        $(sectionid + "#SumQuantity0").autoNumericSet(SumQuantity0);

        $(sectionid + "#SumAmount").autoNumericSet(SumAmount);
        $(sectionid + "#SumAmountFC").autoNumericSet(SumAmountFC);

    }

    function validnumberline(row) {
        var sectionid = "#@(ajaxoption["ajaxupdateid"]) ";
        var IsoCode = $(sectionid + '#IsoCode').val();
        var isFC = (IsoCode.toUpperCase() != globlevar_isocode.toUpperCase());
        if (isFC) {

            //var Credit = $(row).find('input[fieldname = "Credit"]:first');
            //var CreditValue = 0;
            //var ExchangeRateLineValue = $(row).find('input[fieldname = "ExchangeRateLine"]:first').autoNumericGet();

            var Amount = $(row).find('input[fieldname = "Amount"]:first');
            var AmountValue = 0;
            var AmountFCValue = $(row).find('input[fieldname = "AmountFC"]:first').autoNumericGet();
            var ExchangeRateValue = $(sectionid + '#ExchangeRate').autoNumericGet();

            AmountValue = parseFloat(ExchangeRateValue) * parseFloat(AmountFCValue);
            //CreditValue = parseFloat(ExchangeRateLineValue) * parseFloat(AmountFCValue);

            $(Amount).autoNumericSet(AmountValue);
            //$(Credit).autoNumericSet(CreditValue);

        }
        form_refresh();

    }

    function fieldchange(a) {
        var $thisobject = $(a);
        var val = $(a).val();
        var fieldname = $(a).attr("fieldname");
        var url = '@Url.Action("FieldChange")';
        var sectionid = "#@(ajaxoption["ajaxupdateid"]) ";
        switch (fieldname) {
            case "IsoCode":
                //lấy dòng du lieu ve gan cho may cai khac
                $(sectionid + '#CurrencyID').val("");
                $(sectionid + '#ExchangeRate').val(1);
                if (val != "") {
                    $.ajax({
                        type: "GET", url: url, dataType: "json",
                        data: { type: 0, fieldname: fieldname, keyword: val },
                        success: function (data) {
                            if (data.rows != null) {
                                $(sectionid + '#CurrencyID').val(data.rows.CurrencyID);
                                $(sectionid + '#ExchangeRate').autoNumericSet(data.rows.ExchangeRate);

                                $("#divAppVIN05LineView table:first >tbody>tr:visible").each(function () {

                                    if ($(this).attr("rownumber") != "-1") {

                                        validnumberline(this);
                                    }

                                });
                            }
                            else {
                                $thisobject[0].selectize.setValue('');
                                $thisobject[0].selectize.clearOptions();
                            }
                            hideshowgrid();
                        }
                    });
                }
                break;
            case "ExchangeRate":
                $("#divAppVIN05LineView table:first >tbody>tr:visible").each(function () {
                    if ($(this).attr("rownumber") != "-1") {
                        validnumberline(this);
                    }
                });
                break;
            case "CustomerCode":
                //lấy dòng du lieu ve gan cho may cai khac

                $(sectionid + '#CustomerID').val("");
                $(sectionid + '#CustomerName').val("");
                if (val != "") {
                    $.ajax({
                        type: "GET", url: url, dataType: "json",
                        data: { type: 0, fieldname: fieldname, keyword: val },
                        success: function (data) {
                            if (data.rows != null) {
                                $(sectionid + '#CustomerID').val(data.rows.CustomerID);
                                $(sectionid + '#CustomerName').val(data.rows.Name);

                                $(sectionid + '#Contact').val(data.rows.Contact);
                                $(sectionid + '#Address').val(data.rows.Address);
                            }
                            else {
                                $thisobject[0].selectize.setValue('');
                                $thisobject[0].selectize.clearOptions();
                            }
                        }
                    });
                }
                break;
            case "WarehouseCode":
                //lấy dòng du lieu ve gan cho may cai khac

                $(sectionid + '#WarehouseID').val("");
                $(sectionid + '#WarehouseName').val("");
                if (val != "") {
                    $.ajax({
                        type: "GET", url: url, dataType: "json",
                        data: { type: 0, fieldname: fieldname, keyword: val },
                        success: function (data) {
                            if (data.rows != null) {
                                $(sectionid + '#WarehouseID').val(data.rows.WarehouseID);
                                $(sectionid + '#WarehouseName').val(data.rows.Name);
                            }
                            else {
                                $thisobject[0].selectize.setValue('');
                                $thisobject[0].selectize.clearOptions();
                            }
                        }
                    });
                }
                break;
            case "DisplayNumberLineDebit":
                var $tr = $thisobject.closest("tr");
                var AccountDebitLineID = $tr.find('input[fieldname = "AccountDebitLineID"]').first();
                $(AccountDebitLineID).val("");
                if (val != "") {
                    $.ajax({
                        type: "GET", url: url, dataType: "json",
                        data: { type: 1, fieldname: fieldname, keyword: val },
                        success: function (data) {
                            if (data.rows != null) {
                                $(AccountDebitLineID).val(data.rows.AccountID);
                            }
                            else {
                                $thisobject[0].selectize.setValue('');
                                $thisobject[0].selectize.clearOptions();
                            }
                        }
                    });
                }
                break;

            case "DisplayNumberLineCredit":
                // phải chú ý trường hợp tên trường giống nhau ở 2 bảng chi tiết và thuế . nếu muốn xử lý khác thì phải kèm theo id thì mới chính xác
                var $tr = $thisobject.closest("tr");
                var AccountCreditLineID = $tr.find('input[fieldname = "AccountCreditLineID"]').first();
                $(AccountCreditLineID).val("");
                if (val != "") {
                    $.ajax({
                        type: "GET", url: url, dataType: "json",
                        data: { type: 1, fieldname: fieldname, keyword: val },
                        success: function (data) {
                            if (data.rows != null) {
                                //alert(data.rows.AccountCreditLineID);
                                $(AccountCreditLineID).val(data.rows.AccountID);
                            }
                            else {
                                $thisobject[0].selectize.setValue('');
                                $thisobject[0].selectize.clearOptions();
                            }
                        }
                    });
                }
                break;
            case "WarehouseLineCode":
                var $tr = $thisobject.closest("tr");
                var WarehouseLineID = $tr.find('input[fieldname = "WarehouseLineID"]').first();
                var WarehouseLineName = $tr.find('input[fieldname = "WarehouseLineName"]').first();

                $(WarehouseLineID).val("");
                $(WarehouseLineName).val("");

                if (val != "") {
                    $.ajax({
                        type: "GET", url: url, dataType: "json",
                        data: { type: 1, fieldname: fieldname, keyword: val },
                        success: function (data) {
                            if (data.rows != null) {
                                $(WarehouseLineID).val(data.rows.WarehouseID);
                                $(WarehouseLineName).val(data.rows.Name);
                            }
                            else {
                                $thisobject[0].selectize.setValue('');
                                $thisobject[0].selectize.clearOptions();
                            }
                        }
                    });
                }
                break;
            case "UOMCode":
                var $tr = $thisobject.closest("tr");
                var UOMID = $tr.find('input[fieldname = "UOMID"]').first();

                $(UOMID).val("");

                if (val != "") {

                    $.ajax({
                        type: "GET", url: url, dataType: "json",
                        data: { type: 1, fieldname: fieldname, keyword: val },
                        success: function (data) {
                            if (data.rows != null) {
                                $(UOMID).val(data.rows.UOMID);
                            }
                            else {
                                $thisobject[0].selectize.setValue('');
                                $thisobject[0].selectize.clearOptions();
                            }
                        }
                    });
                }
                break;
            case "ItemCode":
                var $tr = $thisobject.closest("tr");
                var ItemName = $tr.find('input[fieldname = "ItemName"]').first();
                var ItemID = $tr.find('input[fieldname = "ItemID"]').first();
                var UOMID = $tr.find('input[fieldname = "UOMID"]').first();
                var UOMCode = $tr.find('select[fieldname = "UOMCode"]').first();

                var AccountCreditLineID = $tr.find('input[fieldname = "AccountCreditLineID"]').first();
                var DisplayNumberLineCredit = $tr.find('select[fieldname = "DisplayNumberLineCredit"]').first();

                var AccountDebitLineID = $tr.find('input[fieldname = "AccountDebitLineID"]').first();
                var DisplayNumberLineDebit = $tr.find('select[fieldname = "DisplayNumberLineDebit"]').first();

                $(ItemName).val("");
                $(ItemID).val("");
                $(UOMID).val("");
                $(UOMCode).selectizesetvalue("");

                $(AccountCreditLineID).val("");
                $(DisplayNumberLineCredit).selectizesetvalue("");

                $(AccountDebitLineID).val("");
                $(DisplayNumberLineDebit).selectizesetvalue("");

                if (val != "") {
                    $.ajax({
                        type: "POST", url: url, dataType: "json",
                        data: { type: 1, fieldname: fieldname, keyword: val },
                        success: function (data) {
                            if (data.rows != null) {

                                $(ItemName).val(data.rows.Name);
                                $(ItemID).val(data.rows.ItemID);
                                $(UOMID).val(data.rows.UOMID);
                                $(UOMCode).selectizesetvalue(data.rows.UOMCode);

                                $(AccountCreditLineID).val(data.rows.AccountID);
                                $(DisplayNumberLineCredit).selectizesetvalue(data.rows.DisplayNumber);

                                $(AccountDebitLineID).val(data.rows.AccountID);
                                $(DisplayNumberLineDebit).selectizesetvalue(data.rows.DisplayNumber);

                            }
                            else {
                                $thisobject[0].selectize.setValue('');
                                $thisobject[0].selectize.clearOptions();
                            }
                        }
                    });
                }
                break;
            case "Quantity0":
                var $tr = $thisobject.closest("tr");
                var IsoCode = $(sectionid + '#IsoCode').val();
                var isFC = (IsoCode.toUpperCase() != globlevar_isocode.toUpperCase());

                if (isFC) {
                    var UnitPriceFC = $tr.find('input[fieldname = "UnitPriceFC"]').first();
                    fieldchange(UnitPriceFC);
                }
                else {
                    var UnitPrice = $tr.find('input[fieldname = "UnitPrice"]').first();
                    fieldchange(UnitPrice);
                }
                break;
            case "UnitPriceFC":
                var $tr = $thisobject.closest("tr");
                var AmountFC = $tr.find('input[fieldname = "AmountFC"]:first');
                var UnitPriceFCValue = parseFloat($thisobject.autoNumericGet());
                var Quantity0Value = parseFloat($tr.find('input[fieldname = "Quantity0"]').first().autoNumericGet());
                var AmountFCValue = UnitPriceFCValue * Quantity0Value;
                $(AmountFC).autoNumericSet(AmountFCValue);

                var ExchangeRateValue = parseFloat($(sectionid + '#ExchangeRate').autoNumericGet());
                var UnitPriceValue = ExchangeRateValue * UnitPriceFCValue;
                $tr.find('input[fieldname = "UnitPrice"]:first').autoNumericSet(UnitPriceValue);

                fieldchange(AmountFC);
                break;
            case "AmountFC":
                var $tr = $thisobject.closest("tr");

                var ExchangeRateValue = parseFloat($(sectionid + '#ExchangeRate').autoNumericGet());
                var AmountFCValue = parseFloat($thisobject.autoNumericGet());
                var AmountValue = ExchangeRateValue * AmountFCValue;
                var Amount = $tr.find('input[fieldname = "Amount"]').first();
                $(Amount).autoNumericSet(AmountValue);
                fieldchange(Amount);

                break;
            case "UnitPrice":
                var $tr = $thisobject.closest("tr");
                var UnitPriceValue = $thisobject.autoNumericGet();
                var Quantity0Value = $tr.find('input[fieldname = "Quantity0"]').first().autoNumericGet();
                var AmountValue = parseFloat(UnitPriceValue) * parseFloat(Quantity0Value);
                var Amount = $tr.find('input[fieldname = "Amount"]').first();
                $(Amount).autoNumericSet(AmountValue);
                fieldchange(Amount);
                break;
            case "AmountFC":
                validnumberline($thisobject.closest("tr"));
                break;
            default:
                SenVietGlobal.ExObjectChange(a, url);
        }
    };

    //Kiểm tra thay đổi tất cả các text
    //$("#@(ajaxoption["ajaxupdateid"]) input[type='text'],#@(ajaxoption["ajaxupdateid"])  select").die(); //Xóa cache
    $("#@(ajaxoption["ajaxupdateid"]) input[type='text'],#@(ajaxoption["ajaxupdateid"])  select").on("change", function () {
        fieldchange(this);
    });

</script>
