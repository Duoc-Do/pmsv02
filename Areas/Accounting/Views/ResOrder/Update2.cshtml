@model WebApp.Areas.Accounting.Models.ResOrderView
@using WebApp.Areas.Accounting.Services
@using WebApp.Areas.Accounting.Models
@{
    Dictionary<string, string> ajaxoption = (Dictionary<string, string>)ViewBag.ajaxoption;

    var status = new SelectList(
           new List<SelectListItem>
            {
                new SelectListItem { Selected = true, Text = "Hủy", Value = "-1"},
                new SelectListItem { Selected = true, Text = "Hoàn thành", Value = "0"},
                new SelectListItem { Selected = false, Text = "Đặt món", Value = "1"},
                new SelectListItem { Selected = false, Text = "Tính tiền", Value = "2"},
            }, "Value", "Text", Model.OrderStatusId);

    string role = WebApp.Areas.Accounting.Services.GlobalVariant.GetAppUser().SysRole.Name.ToLower();

    string isorder = role == "posorder" ? " style=display:none;" : "";

}


<style>
    #clockdiv {
        font-family: sans-serif;
        color: #fff;
        display: inline-block;
        font-weight: 100;
        text-align: center;
        font-size: 16px;
    }

        #clockdiv > div {
            padding: 5px;
            border-radius: 0px;
            background: #00a65a;
            display: inline-block;
        }

        #clockdiv div > span {
            padding: 8px;
            border-radius: 0px;
            background: rgba(0, 0, 0, 0.1) none repeat scroll 0 0;
            display: inline-block;
        }

    .smalltext {
        padding-top: 2px;
        font-size: 12px;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {

        function getTimeRemaining(endtime) {
            //var t = Date.parse(endtime) - Date.parse(new Date());
            var bgtime = new Date();
            
            var t = Date.parse(bgtime.toISOString()) + 3600000*7 - Date.parse(endtime);

            //alert(t);
            if (t < 0) {
                return {
                    'total': 0,
                    'days': 0,
                    'hours': 0,
                    'minutes': 0,
                    'seconds': 0,
                    'totalminutes': 0
                };
            }

            var seconds = Math.floor((t / 1000) % 60);
            var minutes = Math.floor((t / 1000 / 60) % 60);
            var hours = Math.floor((t / (1000 * 60 * 60)) % 24);
            var days = Math.floor(t / (1000 * 60 * 60 * 24));

            var totalminutes = Math.floor((t / 1000 / 60));

            return {
                'total': t,
                'days': days,
                'hours': hours,
                'minutes': minutes,
                'totalminutes': totalminutes,
                'seconds': seconds
            };
        }

        function initializeClock(id, endtime) {
            var clock = document.getElementById(id);
            var daysSpan = clock.querySelector('.days');
            var hoursSpan = clock.querySelector('.hours');
            var minutesSpan = clock.querySelector('.minutes');
            var totalminutesSpan = clock.querySelector('.totalminutes');
            var secondsSpan = clock.querySelector('.seconds');

            function updateClock() {
                var t = getTimeRemaining(endtime);

                daysSpan.innerHTML = t.days;
                hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
                minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
                secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);
                totalminutesSpan.innerHTML = (t.totalminutes);

                if (t.total <= 0) {

                    //alert(t.total);

                    clearInterval(timeinterval);
                }
            }

            updateClock();
            var timeinterval = setInterval(updateClock, 1000);
        }

        var deadline = "@(string.Format("{0}Z", Model.CreatedDateTime.Value.ToString("s")))";
        //alert(deadline);
        initializeClock('clockdiv', deadline);



    })

</script>

<style>
    .product-thumbnail img {
        width: 50px;
    }

    .showallordertable {
        display: block !important;
    }


    .product-add-number {
        text-align: center;
        display: block;
        position: absolute;
        color: red;
        visibility: hidden;
        -webkit-transition: all 1000ms linear;
        -moz-transition: all 1000ms linear;
        -ms-transition: all 1000ms linear;
        -o-transition: all 1000ms linear;
        transition: all 1000ms linear;
        -moz-opacity: 1;
        opacity: 1;
        -moz-transform: scale(1);
        -webkit-transform: scale(1);
        -o-transform: scale(1);
        -ms-transform: scale(1);
        transform: scale(1);
        margin-left: -16px;
        margin-top: -40px;
        width: 100%;
        top: 50%;
        z-index: 9999;
    }

    .product-add-number-reset {
        transition: all 0ms linear;
    }

    .product-add-number-fade {
        /*font-size:5em;*/
        visibility: visible;
        -moz-opacity: 0;
        opacity: 0;
        -moz-transform: scale(15);
        -webkit-transform: scale(15);
        -o-transform: scale(15);
        -ms-transform: scale(15);
        transform: scale(15);
    }
</style>

<section id="@(ajaxoption["ajaxupdateid"])">
    @using (@Ajax.BeginForm(new AjaxOptions { LoadingElementId = ajaxoption["ajaxloadingid"], InsertionMode = InsertionMode.Replace, UpdateTargetId = ajaxoption["ajaxupdateid"], OnComplete = string.Format("appaccountingresorderupdate.submitcomplete('dashboardtable_{0}');", Model.TableId) }))
    {
        @Html.AntiForgeryToken()

        <div class="row-fluid">
            <div class="col-md-12">
  
                <div class="pull-right box-tools">
                    <div class="btn-group">

                        <button class="btn btn-primary btn-flat hidden-md hidden-lg" type="button" onclick="$('#ordertable').toggleClass('showallordertable');">
                            <span class="fa fa-shopping-cart"></span>
                            <span class="label label-warning" data-numberitem="@Model.OrderQuantity.ToString("n0")" id="numberitem">@Model.OrderQuantity.ToString("n0")</span>
                        </button>
                    </div>
                    <div class="btn-group">

                        <button class="btn btn-primary btn-flat" type="button" onclick="appaccountingresorderupdate.sv_toolbar_update_submit_save_close(this);"><span class="fa fa-save"></span></button>
                        <button data-toggle="dropdown" class="btn btn-primary btn-flat dropdown-toggle" type="button">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <ul role="menu" class="dropdown-menu pull-right">
                            <li><a href="javascript:;" onclick="appaccountingresorderupdate.sv_toolbar_update_submit_save_close_print(this);">Lưu & In bếp</a></li>
                            <li><a href="javascript:;" onclick="appaccountingreshome.printorder('@(Model.OrderId)')">In hóa đơn</a></li>
                        </ul>
                    </div>

                    <button type="button" onclick="appaccountingreshome.tabdashboard.tableactive();" title="" data-toggle="tooltip" data-widget="remove" class="btn btn-primary btn-flat" data-original-title="Remove"><i class="fa fa-times"></i></button>
                </div>

                <span style="font-size: 1.2em;">@Model.TableName - giờ vào: @(Model.CreatedDateTime.HasValue ? Model.CreatedDateTime.Value.ToString("dddd-dd MMM yyyy HH:mm:ss") : "")</span>
            </div>
        </div>

        <div class="row-fluid">
            <div class="col-md-12">
                @Html.bsValidationSummary(false)
            </div>
        </div>

        <div class="row-fluid">

            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-12 hidden-xs hidden-sm">
                        <div class="box box-danger">
                            <div class="box-body">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="input-group">
                                            <div style="margin-top: 5px;" id="selectitemlistcontainerid">
                                            </div>
                                            <span class="input-group-btn">
                                                <button data-toggle="collapse" data-target="#calculator" aria-expanded="false" aria-controls="collapseExample" type="button" class="btn btn-default btn-flat"><i class="fa fa-calculator"></i></button>
                                                <button onclick="appaccountingresorderupdate.AddItem2()" type="button" class="btn btn-default btn-flat"><i class="fa fa-plus"></i></button>
                                            </span>
                                        </div>
                                    </div>

                                    <div class="col-md-12">
                                        <div class="collapse" id="calculator">
                                            <div class="input-group">
                                                <input id="quantityitemid" type="text" placeholder="số lượng" class="form-control numeric" decimaldigits="1" value="" />
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default btn-flat" type="button" onclick="$('#quantityitemid').val('')"><i class="fa fa-remove"></i></button>

                                                </span>
                                            </div>
                                            <br />
                                            <div class="btn-group">
                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(0)">0</button>
                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(1)">1</button>
                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(2)">2</button>
                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(3)">3</button>
                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(4)">4</button>

                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(5)">5</button>
                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(6)">6</button>
                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(7)">7</button>
                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(8)">8</button>

                                                <button class="btn btn-default" type="button" onclick="appaccountingresorderupdate.Calculator(9)">9</button>


                                            </div>


                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12 text-primary">
                                        <h4><b>@Html.bsSpanFor(model => model.OrderTotal)</b> <b class="pull-right"><span id="labelordertotal"></span></b></h4>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-12 hidden-xs hidden-sm" id="ordertable">
                        <div class="box box-success">
                            <div class="box-body">
                                <div class="row-fluid text-center">
                                    <div id="clockdiv">
                                        <div>
                                            <span class="totalminutes"></span>
                                            <div class="smalltext">Tổng phút</div>
                                        </div>
                                        <div>
                                            <span class="days"></span>
                                            <div class="smalltext">Ngày</div>
                                        </div>
                                        <div>
                                            <span class="hours"></span>
                                            <div class="smalltext">Giờ</div>
                                        </div>
                                        <div>
                                            <span class="minutes"></span>
                                            <div class="smalltext">Phút</div>
                                        </div>
                                        <div>
                                            <span class="seconds"></span>
                                            <div class="smalltext">Giây</div>
                                        </div>


                                    </div>
                                </div>

                                <hr />


                                <table class="table table-hover" id="ResOrderItemViews" data-tablename="ResOrderItemView" data-keyfield="OrderItemId" data-defaultkeyvalue="0">
                                    <tbody>
                                        <tr data-rownumber="-1" data-keyvalue="0" style="display: none;">
                                            <td style="display: none;">@Html.TextBox("ResOrderItemViews_-1_OrderId", 0, new { data_fieldname = "OrderId", @class = "form-control", style = "border:0px;" })</td>
                                            <td style="display: none;">@Html.TextBox("ResOrderItemViews_-1_OrderItemId", 0, new { data_fieldname = "OrderItemId", @class = "form-control", style = "border:0px;" })</td>
                                            <td style="display: none;">@Html.TextBox("ResOrderItemViews_-1_ItemId", 0, new { data_fieldname = "ItemId", @class = "form-control", style = "border:0px;" }) </td>
                                            <td style="display: none;">@Html.TextBox("ResOrderItemViews_-1_ItemName", "", new { data_fieldname = "ItemName", @class = "form-control", style = "border:0px;" })</td>
                                            <td style="display: none;">@Html.TextBox("ResOrderItemViews_-1_Quantity", 0, new { data_decimaldigits = "0", data_fieldname = "Quantity", @class = "form-control numeric", style = "border:0px;" }) </td>
                                            <td style="display: none;"></td>
                                            <td style="display: none;">@Html.TextBox("ResOrderItemViews_-1_Amount", 0, new { data_decimaldigits = "0", data_fieldname = "Amount", @class = "form-control numeric", style = "border:0px;" }) </td>
                                            <td>
                                                <div class="pull-left product-thumbnail"></div>
                                                <div class="label-item text-right"></div>
                                                <div class="text-right">
                                                    <button type="button" class="btn btn-default" onclick="appaccountingresorderupdate.quantitychange(1,this)"><i class="fa fa-plus"></i></button>
                                                    <button type="button" class="btn btn-default" onclick="appaccountingresorderupdate.quantitychange(-1,this)"><i class="fa fa-minus"></i></button>

                                                    <input type="hidden" value="0" name="ResOrderItemViewz[-1]" id="ResOrderItemViewz_-1_" data-fieldname="ResOrderItemView">
                                                    <a class="btn btn-default" href="javascript:;" onclick="appaccountingresorderupdate.senvietgridremoverow(this)"><i class="fa fa-trash-o"></i></a>

                                                    <a class="btn btn-default" data-toggle="collapse" href="#@string.Format("collapse{0}", "-1")" aria-expanded="false" aria-controls="collapseExample">...</a>
                                                    <div class="collapse" id="@string.Format("collapse{0}", "-1")">
                                                        @Html.TextBox("ResOrderItemViews_-1_Price", 0, new { data_decimaldigits = "0", data_fieldname = "Price", @class = "form-control numeric" })
                                                        @Html.TextBox("ResOrderItemViews_-1_ItemNote", "", new { data_fieldname = "ItemNote", @class = "form-control", placeholder = "Ghi chú" })
                                                    </div>

                                                </div>

                                            </td>

                                        </tr>

                                        @{int i = 0; string createdate = "";}
                                        @foreach (var item in Model.ResOrderItemViews)
                                        {
                                            if (createdate != item.CreateDate.Value.ToString())
                                            {
                                                <tr class="clickable" data-toggle="collapse" data-target="@(String.Format(".{0}", item.CreateDate.Value.ToString("yyyyMMddhms")))">
                                                    <td colspan="8"><i class="glyphicon glyphicon-plus"></i>&nbsp; @item.CreateDate.Value.ToString("dd/MM/yyyy hh:mm:ss")</td>
                                                </tr>
                                                createdate = item.CreateDate.Value.ToString();
                                            }


                                            <tr data-rownumber="@(i)" data-keyvalue="@(item.OrderItemId)" class="collapse @(item.CreateDate.Value.ToString("yyyyMMddhms"))">

                                                <td style="display: none;">@Html.TextBox(string.Format("ResOrderItemViews[{0}].OrderId", i), item.OrderId, new { data_fieldname = "OrderId", @class = "form-control", style = "border:0px;" })</td>
                                                <td style="display: none;">@Html.TextBox(string.Format("ResOrderItemViews[{0}].OrderItemId", i), item.OrderItemId, new { data_fieldname = "OrderItemId", @class = "form-control", style = "border:0px;" })</td>
                                                <td style="display: none;">@Html.TextBox(string.Format("ResOrderItemViews[{0}].ItemId", i), item.ItemId, new { data_fieldname = "ItemId", @class = "form-control", style = "border:0px;" }) </td>
                                                <td style="display: none;">@Html.TextBox(string.Format("ResOrderItemViews[{0}].ItemName", i), item.ItemName, new { data_fieldname = "ItemName", @class = "form-control", style = "border:0px;" })</td>
                                                <td style="display: none;">@Html.TextBox(string.Format("ResOrderItemViews[{0}].Quantity", i), WebApp.Areas.Accounting.Services.ExConvert.Data2String(item.Quantity, "Numeric", "n", ""), new { data_decimaldigits = "0", data_fieldname = "Quantity", @class = "form-control numeric", style = "border:0px;" }) </td>
                                                <td style="display: none;"></td>
                                                <td style="display: none;">@Html.TextBox(string.Format("ResOrderItemViews[{0}].Amount", i), WebApp.Areas.Accounting.Services.ExConvert.Data2String(item.Amount, "Numeric", "c", ""), new { data_decimaldigits = "0", data_fieldname = "Amount", @class = "form-control numeric", style = "border:0px;" }) </td>

                                                <td>
                                                    <div class="pull-left product-thumbnail">
                                                        @*<img src="@()" />*@
                                                    </div>

                                                    <div class="label-item text-right">
                                                        @item.ItemName (<b>@WebApp.Areas.Accounting.Services.ExConvert.Data2String(item.Quantity, "Numeric", "n", "")</b><span>x</span><b>@WebApp.Areas.Accounting.Services.ExConvert.Data2String(item.Price, "Customer", "n", "CIUPCC")</b><span>=</span><b>@WebApp.Areas.Accounting.Services.ExConvert.Data2String(item.Amount, "Numeric", "c", "")</b>)
                                                    </div>
                                                    <div class="text-right">

                                                        <button type="button" class="btn btn-default" onclick="appaccountingresorderupdate.quantitychange(1,this)"><i class="fa fa-plus"></i></button>
                                                        <button type="button" class="btn btn-default" onclick="appaccountingresorderupdate.quantitychange(-1,this)"><i class="fa fa-minus"></i></button>

                                                        <input type="hidden" value="0" name="@(string.Format("ResOrderItemViewz[{0}]", i))" id="@(string.Format("ResOrderItemViewz_{0}_", i))" data-fieldname="ResOrderItemView">
                                                        <a class="btn btn-default" href="javascript:;" onclick="appaccountingresorderupdate.senvietgridremoverow(this)"><i class="fa fa-trash-o"></i></a>

                                                        <a class="btn btn-default" data-toggle="collapse" href="#@string.Format("collapse{0}", i)" aria-expanded="false" aria-controls="collapseExample">...</a>
                                                        <div class="collapse" id="@string.Format("collapse{0}", i)">
                                                            @Html.TextBox(string.Format("ResOrderItemViews[{0}].Price", i), WebApp.Areas.Accounting.Services.ExConvert.Data2String(item.Price, "Customer", "n", "CIUPCC"), new { data_decimaldigits = "0", data_fieldname = "Price", @class = "form-control numeric" })
                                                            @Html.TextBox(string.Format("ResOrderItemViews[{0}].ItemNote", i), item.ItemNote, new { data_fieldname = "ItemNote", @class = "form-control", placeholder = "Ghi chú" })
                                                        </div>

                                                    </div>
                                                </td>

                                            </tr>
                                            i++;
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-12 hidden-xs hidden-sm">
                        <div class="box box-primary">
                            <div class="box-body">
                                @Html.svHiddenFor(model => model.OrderId)
                                @Html.HiddenFor(model => model.OrderDate)
                                @Html.HiddenFor(model => model.TableId)
                                @Html.HiddenFor(model => model.TableName)
                                @Html.HiddenFor(model => model.OrderQuantity)


                                @*@Html.bsEditorFor(model => model.OrderSubtotal)*@
                                <div class="form-group">
                                    <div class="input-group">
                                        <span class="input-group-addon">@Html.bsLabelFor(model => model.OrderSubtotal)</span>
                                        @Html.bsInputFor(model => model.OrderSubtotal)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="input-group">
                                        <span class="input-group-addon">@Html.bsLabelFor(model => model.OrderSurcharge)</span>
                                        @Html.bsInputFor(model => model.OrderSurcharge)
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="input-group">
                                        <div class="input-group-btn">
                                            <button type="button" class="btn btn-default" data-toggle="collapse" data-target="#orderdiscountpercentage3" aria-expanded="false">@Html.bsSpanFor(model => model.OrderDiscountPercentage, new { style = "font-weight:bold;" }) &nbsp;<span class="caret"></span></button>
                                        </div>

                                        @Html.bsInputFor(model => model.OrderDiscountPercentage)
                                    </div>
                                </div>

                                <div class="collapse form-group" id="orderdiscountpercentage3">
                                    <div class="form-control">
                                        <input data-slider-value="@(Model.OrderDiscountPercentage == null ? 0 : Convert.ToInt32(Model.OrderDiscountPercentage))" type="text" id="OrderDiscountPercentage2" class="slider form-control" data-slider-min="0" data-slider-max="100" data-slider-step="5" value="@(Model.OrderDiscountPercentage == null ? 0 : Convert.ToInt32(Model.OrderDiscountPercentage))">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="input-group">
                                        <span class="input-group-addon">@Html.bsLabelFor(model => model.OrderDiscount)</span>
                                        @Html.bsInputFor(model => model.OrderDiscount)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="input-group">
                                        <span class="input-group-addon">@Html.bsLabelFor(model => model.OrderTotal)</span>
                                        @Html.bsInputFor(model => model.OrderTotal)
                                    </div>
                                </div>


                                <a @isorder class="btn btn-block" data-toggle="collapse" href="#resordermasterex" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-angle-double-down"></i></a>
                                <div class="collapse" id="resordermasterex">
                                    @Html.bsTextAreaFor(model => model.Note)
                                    @Html.DropDownList("OrderStatusId", status, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*<div class="col-md-8 hidden-xs hidden-sm">*@
            <div class="col-md-8">
                <div class="box box-primary">
                    <div class="box-body">
                        <div id="inputbygroup">
                        </div>
                    </div>
                </div>
            </div>

        </div>
                                            }
</section>

@Scripts.Render("~/bundles/accapp")

<script>

    var appaccountingresorderupdate = {};

    appaccountingresorderupdate.submitcomplete = function (a) {
        var isvalid = "@(ViewData.ModelState.IsValid.ToString().ToLower())";
        if (isvalid == "true") {
            //appaccountingreshome.tablerefresh(a);
            //appaccountingreshome.tabdashboard.tableactive();
            //appaccountingreshome.postablerefresh(a)
        }
    };

    appaccountingresorderupdate.Calculator = function (a) {
        var quantity = $("#quantityitemid").autoNumericGet();
        var _quantity = "";
        if (quantity == 0) {
            _quantity = a;
        }
        else {
            _quantity = parseInt(quantity).toString() + a.toString();
        }
        $("#quantityitemid").autoNumericSet(parseFloat(_quantity));
    }

    appaccountingresorderupdate.EffectReset = function (a) {
        var b = $(a).find('.product-add-number').first();
        $(b).addClass('product-add-number-reset').removeClass('product-add-number-fade');
    }

    appaccountingresorderupdate.EffectAdd = function (a, q) {

        var b = $(a).find('.product-add-number').first();
        $(b).html('+' + q);
        $(b).removeClass('product-add-number-reset').addClass('product-add-number-fade');

        setTimeout(function () {
            appaccountingresorderupdate.EffectReset(a);
        }, 500);
    };

    appaccountingresorderupdate.UpdateNumberItem = function (a) {
        var numberitem = $("#numberitem").attr("data-numberitem");
        var _numberitem = parseInt(numberitem) + a;
        $("#numberitem").attr("data-numberitem", _numberitem);
        $("#numberitem").html(_numberitem);
    };

    appaccountingresorderupdate.AddItem3 = function (a) {
        var quatityinput = $(a).parent().parent().find('input').first();
        var quantity = $(quatityinput).autoNumericGet();
        if (quantity == 0) {
            quantity = 1;
        }
        $(quatityinput).attr("data-quantity", quantity);
        appaccountingresorderupdate.AddItem(quatityinput);
        //hieu ung
        appaccountingresorderupdate.EffectAdd($(a).closest(".product-box"), quantity);
    }

    appaccountingresorderupdate.AddItem2 = function () {
        //var $thisobject = $("#selectitemlistid");
        var $thisobject = $("#selectitemlistid");
        var val = $thisobject.val();
        if (val == "") {
            return;
        }
        var quantity = $("#quantityitemid").autoNumericGet();

        if (quantity == 0) {
            quantity = 1;
        }

        var item = $(appaccountingreshome.selectitemlist).find("option[value='" + val + "']:first");

        $(item).attr("data-quantity", quantity);
        appaccountingresorderupdate.AddItem(item);
        $thisobject[0].selectize.setValue('');
        //$("#quantityitemid").autoNumericSet(1);
        $("#quantityitemid").val("");
        $thisobject[0].selectize.focus();
    };


    appaccountingresorderupdate.AddItem = function (a) {
        appaccountingresorderupdate.senvietgridaddrow(a);

        var quantity = parseInt($(a).attr("data-quantity"));

        appaccountingresorderupdate.UpdateNumberItem(quantity);

        appaccountingresorderupdate.EffectAdd($(a).closest(".product-box"), quantity);

        //tìm xem hàng này có trong dòng chưa nếu có thì cập nhật số lượng tiền lại

        //var price = $(a).attr("data-price");
        //var quantity = $(a).attr("data-quantity");
        //var amount = parseFloat(price) * parseFloat(quantity);

        //var inrow = 0;
        //var itemcol;
        //var itemid = $(a).attr("data-itemid");
        //$('#ResOrderItemViews>tbody>tr:visible').each(function (i) {
        //    var ItemId = $(this).find('input[data-fieldname = "ItemId"]:first').val();
        //    if (ItemId == itemid) {
        //        inrow = itemid
        //        itemcol = $(this).find('input[data-fieldname = "ItemId"]:first');
        //    }
        //});

        //if (inrow == 0) {
        //    senvietgridaddrow(a);
        //}
        //else {
        //    var quantity = $(a).attr("data-quantity");
        //    quantitychange(quantity, itemcol);
        //}

        //nếu không thì thêm dòng mới
    };


    appaccountingresorderupdate.form_refresh = function () {

        var OrderQuantity = 0;
        var OrderSubtotal = 0;
        var OrderDiscount = 0;

        var OrderSurcharge = 0;
        var OrderDiscountPercentage = 0;
        var Total = 0;


        var sectionid = "#@(ajaxoption["ajaxupdateid"]) ";

        $(sectionid + " table:first >tbody>tr:not('.isdeleted')").each(function () {
            var quantityinput = $(this).find('input[data-fieldname = "Quantity"]:first-child');
            var amountinput = $(this).find('input[data-fieldname = "Amount"]:first-child');

            if (typeof $(quantityinput).attr('data-fieldname') != 'undefined') {

                OrderQuantity += parseFloat($(quantityinput).autoNumericGet());
            }
            if (typeof $(amountinput).attr('data-fieldname') != 'undefined') {
                OrderSubtotal += parseFloat($(amountinput).autoNumericGet());
            }
        });

        OrderDiscountPercentage = parseFloat($(sectionid + "#OrderDiscountPercentage").autoNumericGet());
        OrderDiscount = parseFloat($(sectionid + "#OrderDiscount").autoNumericGet());
        OrderSurcharge = parseFloat($(sectionid + "#OrderSurcharge").autoNumericGet());

        if (OrderDiscountPercentage != 0) {
            OrderDiscount = parseFloat(((OrderSubtotal + OrderSurcharge) * OrderDiscountPercentage) / 100);
            $(sectionid + "#OrderDiscount").autoNumericSet(OrderDiscount);
        }

        Total = OrderSubtotal + OrderSurcharge - OrderDiscount;

        $(sectionid + "#OrderQuantity").autoNumericSet(OrderQuantity);
        $(sectionid + "#OrderSubtotal").autoNumericSet(OrderSubtotal);
        $(sectionid + "#OrderTotal").autoNumericSet(Total);

        $(sectionid + "#labelordertotal").text(addCommas(Total))
    };


    appaccountingresorderupdate.quantitychange = function (num, a) {
        var row = $(a).closest('tr');
        var quantity = $(row).find("input[data-fieldname='Quantity']:first-child").autoNumericGet();
        var _quantity = parseFloat(quantity) + parseFloat(num);
        if (_quantity > 0) {
            appaccountingresorderupdate.UpdateNumberItem(num);
            var quantityobject = $(row).find("input[data-fieldname='Quantity']:first-child");
            $(quantityobject).autoNumericSet(_quantity, { mDec: globalvariant.sysoption.RoundQuantity });
            appaccountingresorderupdate.linevalid(a);
        }
    };

    appaccountingresorderupdate.linevalid = function (a) {
        var row = $(a).closest('tr');
        var quantity = $(row).find("input[data-fieldname='Quantity']:first-child").autoNumericGet();
        var price = $(row).find("input[data-fieldname='Price']:first-child").autoNumericGet();
        var amount = parseFloat(price) * parseFloat(quantity);
        var amountcell = $(row).find("input[data-fieldname='Amount']:first-child");
        $(amountcell).autoNumericSet(amount);

        appaccountingresorderupdate.setlabel(row);
        appaccountingresorderupdate.form_refresh();
    };

    appaccountingresorderupdate.setlabel = function (a) {
        var row = a;//$(a).closest('tr');
        var itemname = $(row).find("input[data-fieldname='ItemName']:first-child").val();
        var quantity = $(row).find("input[data-fieldname='Quantity']:first-child").autoNumericGet();
        var price = $(row).find("input[data-fieldname='Price']:first-child").autoNumericGet();
        var amount = $(row).find("input[data-fieldname='Amount']:first-child").autoNumericGet();
        var label = itemname + " (<b>" + addCommas(quantity) + "</b>x<b>" + addCommas(price) + "</b>=<b>" + addCommas(amount) + "</b>)";

        $(row).find("td > .label-item").html(label);
    };

    appaccountingresorderupdate.senvietgridremoverow = function (delobject) {
        $(delobject).parent().find(':hidden').val('-1');
        $(delobject).closest('tr').addClass('isdeleted');
        $(delobject).closest('tr').hide();

        //update lai label numberitem
        var row = $(delobject).closest('tr');
        var quantity = $(row).find("input[data-fieldname='Quantity']:first-child").autoNumericGet();
        var _quantity = parseFloat(quantity) * -1;
        appaccountingresorderupdate.UpdateNumberItem(_quantity);
        appaccountingresorderupdate.form_refresh();
    };

    appaccountingresorderupdate.senvietgridaddrow = function (a) {

        var price = $(a).attr("data-price");
        var quantity = $(a).attr("data-quantity");
        var amount = parseFloat(price) * parseFloat(quantity);

        var itemid = $(a).attr("data-itemid");
        var itemname = $(a).attr("data-itemname");

        var itempicture = $(a).attr("data-itempicture");


        var tablename = $('#ResOrderItemViews').attr('data-tablename');
        var keyfield = $('#ResOrderItemViews').attr('data-keyfield');
        var keyvalue = $('#ResOrderItemViews').attr('data-defaultkeyvalue');

        var tbbody = $('#ResOrderItemViews > tbody');

        var rowcount = $(tbbody).children('tr[data-rownumber]').size() - 1;

        var newrow = $(tbbody).find('tr[data-rownumber=-1]').clone();

        //reset lại giá trị dòng thêm sau khi copy ra để nhập mới
        $(tbbody).find('tr[data-rownumber=-1]').find('input').val('');


        $(newrow).attr({ 'data-rownumber': rowcount });

        $(newrow).attr("style", "display:table-row;");

        $(tbbody).find('tr:last').after(newrow)
        $(tbbody).find('tr:last').show();

        $(tbbody).find('tr:last>td').each(function (index, value) {

            $(value).find('input').each(function (i) {
                var col = $(this);
                var fieldname = $(col).attr('data-fieldname');
                $(col).attr({
                    name: tablename + 's[' + rowcount + '].' + fieldname,
                    id: tablename + 's_' + rowcount + '__' + fieldname
                });

                switch (fieldname) {
                    case "ItemId":
                        $(col).val(itemid);
                        break;
                    case "ItemName":
                        $(col).val(itemname);
                        break;
                    case "Quantity":
                        $(col).autoNumericSet(quantity, { mDec: globalvariant.sysoption.RoundQuantity });
                        break;
                    case "Price":
                        $(col).autoNumericSet(parseFloat(price));
                        break;
                    case "Amount":
                        $(col).autoNumericSet(amount);
                        break;
                    default:
                        break;
                }

                if (fieldname == keyfield) {
                    $(col).val(keyvalue);
                };
                if (fieldname == tablename) {

                    $(col).val(keyvalue);
                    $(col).attr({
                        name: tablename + 'z[' + rowcount + ']'
                    });
                };
            });

        });

        $(newrow).find('.numeric').each(function (i) {
            var decimaldigits = $(this).attr('data-decimaldigits');
            $(this).autoNumeric({ mDec: decimaldigits });
        });

        $("input[data-fieldname='Quantity'],input[data-fieldname='Price']").on("change", function () {
            appaccountingresorderupdate.linevalid(this);
        });

        $(newrow).find('td > .product-thumbnail').append('<img src="' + itempicture + '">');

        $(newrow).find("a[data-toggle='collapse']").each(function (i) {
            $(this).attr("href", "#collapse" + rowcount);
        });
        $(newrow).find('div.collapse').each(function (i) {
            $(this).attr("id", "collapse" + rowcount);
        });

        appaccountingresorderupdate.setlabel(newrow);
        $(a).closest('tr').find('input:visible:first').focus().select();
        appaccountingresorderupdate.form_refresh();
    };

    appaccountingresorderupdate.sv_toolbar_update_submit_save_close = function (a) {
        $(a).closest('form').submit();
    };

    appaccountingresorderupdate.sv_toolbar_update_submit_save_close_print = function (a) {
        $(a).closest('form').submit();
        appaccountingreshome.printorder2('@(Model.OrderId)', '@(Model.TableId)');
    };

    $(document).ready(function () {
        //$(".slider").slider();
        $('#OrderDiscountPercentage2').slider()
              .on('slideStop', function (ev) {
                  $('#OrderDiscountPercentage').val($("#OrderDiscountPercentage2").slider('getValue'));
                  $('#OrderDiscountPercentage').trigger("change");
              });

        var _selectitemlist = $(appaccountingreshome.selectitemlist).clone();
        $("#selectitemlistcontainerid").append(_selectitemlist);
        var $select = $("#selectitemlistid").selectize({
            maxOptions: 10, selectOnTab: true, openOnFocus: false
        });
        var control = $select[0].selectize;
        control.clear();

        $("#inputbygroup").append(appaccountingreshome.inputbygroup);

        $("#selectitemlistcontainerid input").keypress(function (event) {
            if (event.keyCode == 13) {
                appaccountingresorderupdate.AddItem2();
                return false;
            }
        });

        $("input:text").focus(function () { $(this).select(); });

        $('.numeric').each(function (i) {
            var decimaldigits = $(this).attr('decimaldigits');
            $(this).autoNumeric({ mDec: decimaldigits });
        });

        $("#quantityitemid").keypress(function (event) {
            if (event.keyCode == 13) {
                appaccountingresorderupdate.AddItem2();
                return false;
            }
        });

        $(".enter-quantity").unbind('keypress');
        $(".enter-quantity").keypress(function (event) {
            if (event.keyCode == 13) {
                $(this).attr("data-quantity", $(this).autoNumericGet());
                appaccountingresorderupdate.AddItem(this);
                return false;
            }

        });


        $("input[data-fieldname='Quantity'],input[data-fieldname='Price']").change(function () {
            appaccountingresorderupdate.linevalid(this);
        });

        $("#OrderDiscountPercentage").change(function () {
            var sectionid = "#@(ajaxoption["ajaxupdateid"]) ";
            var OrderDiscountPercentage = 0;
            var OrderDiscount = 0;
            var OrderSubtotal = 0;
            OrderSubtotal = parseFloat($(sectionid + "#OrderSubtotal").autoNumericGet());
            OrderDiscountPercentage = parseFloat($(this).autoNumericGet());
            OrderDiscount = parseFloat((OrderSubtotal * OrderDiscountPercentage) / 100);
            $(sectionid + "#OrderDiscount").autoNumericSet(OrderDiscount);
            appaccountingresorderupdate.form_refresh();
        });
        $("#OrderSurcharge").change(function () {
            appaccountingresorderupdate.form_refresh();
        });
        $("#OrderDiscount").change(function () {
            appaccountingresorderupdate.form_refresh();
        });

        $("#filteritem").keyup(function (event) {
            appaccountingreshome.hideobject(this);
        });

        $(".hasclear").keyup(function () {
            var t = $(this);
            t.next('span').toggle(Boolean(t.val()));
        });

        $(".clearer").hide($(this).prev('input').val());

        $(".clearer").click(function () {
            $(this).prev('input').val('').focus();

            $(this).hide();
            appaccountingreshome.hideobject($(this).prev('input'));
        });

        var Total = $("#OrderTotal").autoNumericGet();
        $("#labelordertotal").text(addCommas(Total))
    });
</script>
